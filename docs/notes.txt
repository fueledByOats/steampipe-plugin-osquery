// logging

plugin.Logger(ctx).Info("tableJSONDebug, cols:", d.QueryContext.Columns)
plugin.Logger(ctx).Info("something")

// .tables
SELECT name FROM osquery_registry WHERE registry='table'

// debugging pty 
cmd0 := exec.Command("pwd")
var err0 error
cmd0.Dir = "/home/sven/go"
c.ptmx0, err0 = startCommandWithPty(cmd0)
if err0 != nil {
    return fmt.Errorf("failed to start cmd1: %v", err0)
}

// Wait for the response
scanner := bufio.NewScanner(c.ptmx0)
for scanner.Scan() {
    line := scanner.Text()
    plugin.Logger(ctx).Info("Received go env:", line)
}

// Merch request: grpc/quals.go
https://github.com/turbot/steampipe-plugin-sdk/blob/main/grpc/quals.go#L97
func QualToString(ctx context.Context, q *proto.Qual) string {
	fieldName := q.FieldName
	operator := q.GetStringValue()
	value := GetQualValue(ctx, q.Value)

	// Build the output string using string concatenation
	return "Column: " + fieldName + ", Operator: '" + operator + "', Value: '" + fmt.Sprintf("%v", value) + "'"
}

// Known Bugs
select * from file where "path"='/etc/passwd' or "path" = '/etc/shadow'
TODO:
--> Steampipe Slack Channel: "or" + "client.stop"
Next Steps:
- custom command in connection conf
- ssh: entweder ssh-agent oder controlpath für interaktive Auth
- client.stop potenziell über ctx 
- review everything (logging, error handling, code optimization)
[o] client provisorisch in internal --> langfristig eigenes modul 
[x] table descriptions
[x] table definition more general
