[
    {
        "name": "account_policy_data",
        "description": "Additional macOS user account data from the AccountPolicy section of OpenDirectory.",
        "examples": [
            "select * from users join account_policy_data using (uid)"
        ]
    },
    {
        "name": "acpi_tables",
        "description": "Firmware ACPI functional table common metadata and content.",
        "examples": []
    },
    {
        "name": "ad_config",
        "description": "macOS Active Directory configuration.",
        "examples": []
    },
    {
        "name": "alf",
        "description": "macOS application layer firewall (ALF) service details.",
        "examples": []
    },
    {
        "name": "alf_exceptions",
        "description": "macOS application layer firewall (ALF) service exceptions.",
        "examples": []
    },
    {
        "name": "alf_explicit_auths",
        "description": "ALF services explicitly allowed to perform networking.",
        "examples": []
    },
    {
        "name": "app_schemes",
        "description": "macOS application schemes and handlers (e.g., http, file, mailto).",
        "examples": []
    },
    {
        "name": "apparmor_events",
        "description": "Track AppArmor events.",
        "examples": []
    },
    {
        "name": "apparmor_profiles",
        "description": "Track active AppArmor profiles.",
        "examples": [
            "SELECT * FROM apparmor_profiles WHERE mode = 'complain'"
        ]
    },
    {
        "name": "appcompat_shims",
        "description": "Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format. See http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf for more details.",
        "examples": [
            "select * from appcompat_shims;"
        ]
    },
    {
        "name": "apps",
        "description": "macOS applications installed in known search paths (e.g., /Applications).",
        "examples": []
    },
    {
        "name": "apt_sources",
        "description": "Current list of APT repositories or software channels.",
        "examples": []
    },
    {
        "name": "arp_cache",
        "description": "Address resolution cache, both static and dynamic (from ARP, NDP).",
        "examples": []
    },
    {
        "name": "asl",
        "description": "Queries the Apple System Log data structure for system events.",
        "examples": []
    },
    {
        "name": "atom_packages",
        "description": "Lists all atom packages in a directory or globally installed in a system.",
        "examples": [
            "select * from atom_packages"
        ]
    },
    {
        "name": "augeas",
        "description": "Configuration files parsed by augeas.",
        "examples": [
            "select * from augeas where path = '/etc/hosts'"
        ]
    },
    {
        "name": "authenticode",
        "description": "File (executable, bundle, installer, disk) code signing status.",
        "examples": [
            "SELECT * FROM authenticode WHERE path = 'C:\\Windows\\notepad.exe'",
            "SELECT process.pid, process.path, signature.result FROM processes as process LEFT JOIN authenticode AS signature ON process.path = signature.path;"
        ]
    },
    {
        "name": "authorization_mechanisms",
        "description": "macOS Authorization mechanisms database.",
        "examples": [
            "select * from authorization_mechanisms;",
            "select * from authorization_mechanisms where label = 'system.login.console';",
            "select * from authorization_mechanisms where label = 'authenticate';"
        ]
    },
    {
        "name": "authorizations",
        "description": "macOS Authorization rights database.",
        "examples": [
            "select * from authorizations;",
            "select * from authorizations where label = 'system.login.console';",
            "select * from authorizations where label = 'authenticate';",
            "select * from authorizations where label = 'system.preferences.softwareupdate';"
        ]
    },
    {
        "name": "authorized_keys",
        "description": "A line-delimited authorized_keys table.",
        "examples": [
            "select * from users join authorized_keys using (uid)"
        ]
    },
    {
        "name": "autoexec",
        "description": "Aggregate of executables that will automatically execute on the target machine. This is an amalgamation of other tables like services, scheduled_tasks, startup_items and more.",
        "examples": []
    },
    {
        "name": "azure_instance_metadata",
        "description": "Azure instance metadata.",
        "examples": [
            "select * from ec2_instance_metadata"
        ]
    },
    {
        "name": "azure_instance_tags",
        "description": "Azure instance tags.",
        "examples": [
            "select * from ec2_instance_tags"
        ]
    },
    {
        "name": "background_activities_moderator",
        "description": "Background Activities Moderator (BAM) tracks application execution.",
        "examples": [
            "select * from background_activities_moderator;"
        ]
    },
    {
        "name": "battery",
        "description": "Provides information about the internal battery of a Macbook.",
        "examples": []
    },
    {
        "name": "bitlocker_info",
        "description": "Retrieve bitlocker status of the machine.",
        "examples": []
    },
    {
        "name": "block_devices",
        "description": "Block (buffered access) device file nodes: disks, ramdisks, and DMG containers.",
        "examples": []
    },
    {
        "name": "bpf_process_events",
        "description": "Track time/action process executions.",
        "examples": []
    },
    {
        "name": "bpf_socket_events",
        "description": "Track network socket opens and closes.",
        "examples": []
    },
    {
        "name": "browser_plugins",
        "description": "All C/NPAPI browser plugin details for all users. C/NPAPI has been deprecated on all major browsers. To query for plugins on modern browsers, try: `chrome_extensions` `firefox_addons` `safari_extensions`.",
        "examples": [
            "select * from users join browser_plugins using (uid)"
        ]
    },
    {
        "name": "carbon_black_info",
        "description": "Returns info about a Carbon Black sensor install.",
        "examples": []
    },
    {
        "name": "carves",
        "description": "List the set of completed and in-progress carves. If carve=1 then the query is treated as a new carve request.",
        "examples": [
            "select * from carves",
            "select * from carves where status like '%FAIL%'",
            "select * from carves where path like '/Users/%/Downloads/%' and carve=1"
        ]
    },
    {
        "name": "certificates",
        "description": "Certificate Authorities installed in Keychains/ca-bundles.",
        "examples": []
    },
    {
        "name": "chassis_info",
        "description": "Display information pertaining to the chassis and its security status.",
        "examples": [
            "select * from chassis_info"
        ]
    },
    {
        "name": "chocolatey_packages",
        "description": "Chocolatey packages installed in a system.",
        "examples": []
    },
    {
        "name": "chrome_extension_content_scripts",
        "description": "Chrome browser extension content scripts.",
        "examples": [
            "SELECT chrome_extension_content_scripts.* FROM users JOIN chrome_extension_content_scripts USING (uid) GROUP BY identifier, match"
        ]
    },
    {
        "name": "chrome_extensions",
        "description": "Chrome-based browser extensions.",
        "examples": [
            "select * from users join chrome_extensions using (uid)"
        ]
    },
    {
        "name": "connected_displays",
        "description": "Provides information about the connected displays of the machine.",
        "examples": []
    },
    {
        "name": "connectivity",
        "description": "Provides the overall system's network state.",
        "examples": [
            "select * from connectivity",
            "select ipv4_internet from connectivity"
        ]
    },
    {
        "name": "cpu_info",
        "description": "Retrieve cpu hardware info of the machine.",
        "examples": []
    },
    {
        "name": "cpu_time",
        "description": "Displays information from /proc/stat file about the time the cpu cores spent in different parts of the system.",
        "examples": []
    },
    {
        "name": "cpuid",
        "description": "Useful CPU features from the cpuid ASM call.",
        "examples": []
    },
    {
        "name": "crashes",
        "description": "Application, System, and Mobile App crash logs.",
        "examples": [
            "select * from users join crashes using (uid)"
        ]
    },
    {
        "name": "crontab",
        "description": "Line parsed values from system and user cron/tab.",
        "examples": []
    },
    {
        "name": "cups_destinations",
        "description": "Returns all configured printers.",
        "examples": []
    },
    {
        "name": "cups_jobs",
        "description": "Returns all completed print jobs from cups.",
        "examples": []
    },
    {
        "name": "curl",
        "description": "Perform an http request and return stats about it.",
        "examples": [
            "select url, round_trip_time, response_code from curl where url = 'https://github.com/osquery/osquery'"
        ]
    },
    {
        "name": "curl_certificate",
        "description": "Inspect TLS certificates by connecting to input hostnames.",
        "examples": [
            "select * from curl_certificate where hostname = 'osquery.io'select * from curl_certificate where hostname = 'osquery.io' and dump_certificate = 1"
        ]
    },
    {
        "name": "deb_packages",
        "description": "The installed DEB package database.",
        "examples": []
    },
    {
        "name": "default_environment",
        "description": "Default environment variables and values.",
        "examples": []
    },
    {
        "name": "device_file",
        "description": "Similar to the file table, but use TSK and allow block address access.",
        "examples": []
    },
    {
        "name": "device_firmware",
        "description": "A best-effort list of discovered firmware versions.",
        "examples": []
    },
    {
        "name": "device_hash",
        "description": "Similar to the hash table, but use TSK and allow block address access.",
        "examples": []
    },
    {
        "name": "device_partitions",
        "description": "Use TSK to enumerate details about partitions on a disk device.",
        "examples": []
    },
    {
        "name": "disk_encryption",
        "description": "Disk encryption status and information.",
        "examples": []
    },
    {
        "name": "disk_events",
        "description": "Track DMG disk image events (appearance/disappearance) when opened.",
        "examples": []
    },
    {
        "name": "disk_info",
        "description": "Retrieve basic information about the physical disks of a system.",
        "examples": []
    },
    {
        "name": "dns_cache",
        "description": "Enumerate the DNS cache using the undocumented DnsGetCacheDataTable function in dnsapi.dll.",
        "examples": [
            "select * from dns_cache"
        ]
    },
    {
        "name": "dns_resolvers",
        "description": "Resolvers used by this host.",
        "examples": []
    },
    {
        "name": "docker_container_envs",
        "description": "Docker container environment variables.",
        "examples": [
            "select * from docker_container_envs",
            "select * from docker_container_envs where id = '1234567890abcdef'",
            "select * from docker_container_envs where id = '11b2399e1426d906e62a0c657650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_fs_changes",
        "description": "Changes to files or directories on container's filesystem.",
        "examples": [
            "select * from docker_container_fs_changes where id = '1234567890abcdef'",
            "select * from docker_container_fs_changes where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_labels",
        "description": "Docker container labels.",
        "examples": [
            "select * from docker_container_labels",
            "select * from docker_container_labels where id = '1234567890abcdef'",
            "select * from docker_container_labels where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_mounts",
        "description": "Docker container mounts.",
        "examples": [
            "select * from docker_container_mounts",
            "select * from docker_container_mounts where id = '1234567890abcdef'",
            "select * from docker_container_mounts where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_networks",
        "description": "Docker container networks.",
        "examples": [
            "select * from docker_container_networks",
            "select * from docker_container_networks where id = '1234567890abcdef'",
            "select * from docker_container_networks where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_ports",
        "description": "Docker container ports.",
        "examples": [
            "select * from docker_container_ports",
            "select * from docker_container_ports where id = '1234567890abcdef'",
            "select * from docker_container_ports where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_processes",
        "description": "Docker container processes.",
        "examples": [
            "select * from docker_container_processes where id = '1234567890abcdef'",
            "select * from docker_container_processes where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_container_stats",
        "description": "Docker container statistics. Queries on this table take at least one second.",
        "examples": [
            "select * from docker_container_stats where id = 'de8cfdc74c850967'",
            "select * from docker_container_stats where id = 'de8cfdc74c850967fd3832e128f4d12e2d5476a4aea282734bfb7e57f66fce2f'"
        ]
    },
    {
        "name": "docker_containers",
        "description": "Docker containers information.",
        "examples": [
            "select * from docker_containers where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'",
            "select * from docker_containers where name = '/hello'"
        ]
    },
    {
        "name": "docker_image_history",
        "description": "Docker image history information.",
        "examples": [
            "select * from docker_image_history",
            "select * from docker_image_history where id = '6a2f32de169d'",
            "select * from docker_image_history where id = '6a2f32de169d14e6f8a84538eaa28f2629872d7d4f580a303b296c60db36fbd7'"
        ]
    },
    {
        "name": "docker_image_labels",
        "description": "Docker image labels.",
        "examples": [
            "select * from docker_image_labels",
            "select * from docker_image_labels where id = '1234567890abcdef'",
            "select * from docker_image_labels where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_image_layers",
        "description": "Docker image layers information.",
        "examples": [
            "select * from docker_images",
            "select * from docker_images where id = '6a2f32de169d'",
            "select * from docker_images where id = '6a2f32de169d14e6f8a84538eaa28f2629872d7d4f580a303b296c60db36fbd7'"
        ]
    },
    {
        "name": "docker_images",
        "description": "Docker images information.",
        "examples": [
            "select * from docker_images",
            "select * from docker_images where id = '6a2f32de169d'",
            "select * from docker_images where id = '6a2f32de169d14e6f8a84538eaa28f2629872d7d4f580a303b296c60db36fbd7'"
        ]
    },
    {
        "name": "docker_info",
        "description": "Docker system information.",
        "examples": [
            "select * from docker_info"
        ]
    },
    {
        "name": "docker_network_labels",
        "description": "Docker network labels.",
        "examples": [
            "select * from docker_network_labels",
            "select * from docker_network_labels where id = '1234567890abcdef'",
            "select * from docker_network_labels where id = '11b2399e1426d906e62a0c357650e363426d6c56dbe2f35cbaa9b452250e3355'"
        ]
    },
    {
        "name": "docker_networks",
        "description": "Docker networks information.",
        "examples": [
            "select * from docker_networks",
            "select * from docker_networks where id = 'cfd2ffd49439'",
            "select * from docker_networks where id = 'cfd2ffd494395b75d77539761df40cde06a2b6b497e0c9c1adc6c5a79539bfad'"
        ]
    },
    {
        "name": "docker_version",
        "description": "Docker version information.",
        "examples": [
            "select version from docker_version"
        ]
    },
    {
        "name": "docker_volume_labels",
        "description": "Docker volume labels.",
        "examples": [
            "select * from docker_volume_labels",
            "select * from docker_volume_labels where name = 'btrfs'"
        ]
    },
    {
        "name": "docker_volumes",
        "description": "Docker volumes information.",
        "examples": [
            "select * from docker_volumes",
            "select * from docker_volumes where name = 'btrfs'"
        ]
    },
    {
        "name": "drivers",
        "description": "Details for in-use Windows device drivers. This does not display installed but unused drivers.",
        "examples": [
            "select * from drivers"
        ]
    },
    {
        "name": "ec2_instance_metadata",
        "description": "EC2 instance metadata.",
        "examples": [
            "select * from ec2_instance_metadata"
        ]
    },
    {
        "name": "ec2_instance_tags",
        "description": "EC2 instance tag key value pairs.",
        "examples": [
            "select * from ec2_instance_tags"
        ]
    },
    {
        "name": "es_process_events",
        "description": "Process execution events from EndpointSecurity.",
        "examples": []
    },
    {
        "name": "es_process_file_events",
        "description": "File integrity monitoring events from EndpointSecurity including process context.",
        "examples": []
    },
    {
        "name": "etc_hosts",
        "description": "Line-parsed /etc/hosts.",
        "examples": []
    },
    {
        "name": "etc_protocols",
        "description": "Line-parsed /etc/protocols.",
        "examples": []
    },
    {
        "name": "etc_services",
        "description": "Line-parsed /etc/services.",
        "examples": []
    },
    {
        "name": "event_taps",
        "description": "Returns information about installed event taps.",
        "examples": []
    },
    {
        "name": "extended_attributes",
        "description": "Returns the extended attributes for files (similar to Windows ADS).",
        "examples": []
    },
    {
        "name": "fan_speed_sensors",
        "description": "Fan speeds.",
        "examples": []
    },
    {
        "name": "file",
        "description": "Interactive filesystem attributes and metadata.",
        "examples": [
            "select * from file where path = '/etc/passwd'",
            "select * from file where directory = '/etc/'",
            "select * from file where path LIKE '/etc/%'"
        ]
    },
    {
        "name": "file_events",
        "description": "Track time/action changes to files specified in configuration data.",
        "examples": []
    },
    {
        "name": "firefox_addons",
        "description": "Firefox browser extensions, webapps, and addons.",
        "examples": [
            "SELECT * FROM users CROSS JOIN firefox_addons USING (uid)"
        ]
    },
    {
        "name": "gatekeeper",
        "description": "macOS Gatekeeper Details.",
        "examples": []
    },
    {
        "name": "gatekeeper_approved_apps",
        "description": "Gatekeeper apps a user has allowed to run.",
        "examples": []
    },
    {
        "name": "groups",
        "description": "Local system groups.",
        "examples": [
            "select * from groups where gid = 0"
        ]
    },
    {
        "name": "hardware_events",
        "description": "Hardware (PCI/USB/HID) events from UDEV or IOKit.",
        "examples": []
    },
    {
        "name": "hash",
        "description": "Filesystem hash data.",
        "examples": [
            "select * from hash where path = '/etc/passwd'",
            "select * from hash where directory = '/etc/'"
        ]
    },
    {
        "name": "homebrew_packages",
        "description": "The installed homebrew package database.",
        "examples": []
    },
    {
        "name": "hvci_status",
        "description": "Retrieve HVCI info of the machine.",
        "examples": []
    },
    {
        "name": "ibridge_info",
        "description": "Information about the Apple iBridge hardware controller.",
        "examples": []
    },
    {
        "name": "ie_extensions",
        "description": "Internet Explorer browser extensions.",
        "examples": []
    },
    {
        "name": "intel_me_info",
        "description": "Intel ME/CSE Info.",
        "examples": []
    },
    {
        "name": "interface_addresses",
        "description": "Network interfaces and relevant metadata.",
        "examples": []
    },
    {
        "name": "interface_details",
        "description": "Detailed information and stats of network interfaces.",
        "examples": [
            "select interface, mac, type, idrops as input_drops from interface_details;",
            "select interface, mac, type, flags, (1<<8) as promisc_flag from interface_details where (flags & promisc_flag) > 0;",
            "select interface, mac, type, flags, (1<<3) as loopback_flag from interface_details where (flags & loopback_flag) > 0;"
        ]
    },
    {
        "name": "interface_ipv6",
        "description": "IPv6 configuration and stats of network interfaces.",
        "examples": []
    },
    {
        "name": "iokit_devicetree",
        "description": "The IOKit registry matching the DeviceTree plane.",
        "examples": []
    },
    {
        "name": "iokit_registry",
        "description": "The full IOKit registry without selecting a plane.",
        "examples": []
    },
    {
        "name": "iptables",
        "description": "Linux IP packet filtering and NAT tool.",
        "examples": []
    },
    {
        "name": "kernel_extensions",
        "description": "macOS's kernel extensions, both loaded and within the load search path.",
        "examples": []
    },
    {
        "name": "kernel_info",
        "description": "Basic active kernel information.",
        "examples": []
    },
    {
        "name": "kernel_keys",
        "description": "List of security data, authentication keys and encryption keys.",
        "examples": [
            "select * from kernel_keys"
        ]
    },
    {
        "name": "kernel_modules",
        "description": "Linux kernel modules both loaded and within the load search path.",
        "examples": []
    },
    {
        "name": "kernel_panics",
        "description": "System kernel panic logs.",
        "examples": []
    },
    {
        "name": "keychain_acls",
        "description": "Applications that have ACL entries in the keychain.",
        "examples": [
            "select label, description, authorizations, path, count(path) as c from keychain_acls where label != '' and path != '' group by label having c > 1;"
        ]
    },
    {
        "name": "keychain_items",
        "description": "Generic details about keychain items.",
        "examples": []
    },
    {
        "name": "known_hosts",
        "description": "A line-delimited known_hosts table.",
        "examples": [
            "select * from users join known_hosts using (uid)"
        ]
    },
    {
        "name": "kva_speculative_info",
        "description": "Display kernel virtual address and speculative execution information for the system.",
        "examples": [
            "select * from kva_speculative_info"
        ]
    },
    {
        "name": "last",
        "description": "System logins and logouts.",
        "examples": []
    },
    {
        "name": "launchd",
        "description": "LaunchAgents and LaunchDaemons from default search paths.",
        "examples": []
    },
    {
        "name": "launchd_overrides",
        "description": "Override keys, per user, for LaunchDaemons and Agents.",
        "examples": []
    },
    {
        "name": "listening_ports",
        "description": "Processes with listening (bound) network sockets/ports.",
        "examples": []
    },
    {
        "name": "load_average",
        "description": "Displays information about the system wide load averages.",
        "examples": [
            "select * from load_average;"
        ]
    },
    {
        "name": "location_services",
        "description": "Reports the status of the Location Services feature of the OS.",
        "examples": []
    },
    {
        "name": "logged_in_users",
        "description": "Users with an active shell on the system.",
        "examples": []
    },
    {
        "name": "logical_drives",
        "description": "Details for logical drives on the system. A logical drive generally represents a single partition.",
        "examples": [
            "select * from logical_drives",
            "select free_space from logical_drives where device_id = 'C:'"
        ]
    },
    {
        "name": "logon_sessions",
        "description": "Windows Logon Session.",
        "examples": [
            "select * from logon_sessions;"
        ]
    },
    {
        "name": "lxd_certificates",
        "description": "LXD certificates information.",
        "examples": [
            "select * from lxd_certificates"
        ]
    },
    {
        "name": "lxd_cluster",
        "description": "LXD cluster information.",
        "examples": [
            "select * from lxd_cluster"
        ]
    },
    {
        "name": "lxd_cluster_members",
        "description": "LXD cluster members information.",
        "examples": [
            "select * from lxd_cluster_members"
        ]
    },
    {
        "name": "lxd_images",
        "description": "LXD images information.",
        "examples": [
            "select * from lxd_images",
            "select * from lxd_images where id = '0931b693c8'",
            "select * from lxd_images where id = '0931b693c877ef357b9e17b3195ae952a2450873923ffd2b34b60836ea730cfa'"
        ]
    },
    {
        "name": "lxd_instance_config",
        "description": "LXD instance configuration information.",
        "examples": [
            "select * from lxd_instance_config where name = 'hello'"
        ]
    },
    {
        "name": "lxd_instance_devices",
        "description": "LXD instance devices information.",
        "examples": [
            "select * from lxd_instance_devices where name = 'hello'"
        ]
    },
    {
        "name": "lxd_instances",
        "description": "LXD instances information.",
        "examples": [
            "select * from lxd_instances",
            "select * from lxd_instances where name = 'hello'"
        ]
    },
    {
        "name": "lxd_networks",
        "description": "LXD network information.",
        "examples": [
            "select * from lxd_networks"
        ]
    },
    {
        "name": "lxd_storage_pools",
        "description": "LXD storage pool information.",
        "examples": [
            "select * from lxd_storage_pools"
        ]
    },
    {
        "name": "magic",
        "description": "Magic number recognition library table.",
        "examples": []
    },
    {
        "name": "managed_policies",
        "description": "The managed configuration policies from AD, MDM, MCX, etc.",
        "examples": []
    },
    {
        "name": "md_devices",
        "description": "Software RAID array settings.",
        "examples": []
    },
    {
        "name": "md_drives",
        "description": "Drive devices used for Software RAID.",
        "examples": []
    },
    {
        "name": "md_personalities",
        "description": "Software RAID setting supported by the kernel.",
        "examples": []
    },
    {
        "name": "mdfind",
        "description": "Run searches against the spotlight database.",
        "examples": [
            "select count(*) from mdfind where query = 'kMDItemTextContent == \"osquery\"';select * from mdfind where query = 'kMDItemDisplayName == \"rook.stl\"';",
            "select * from mdfind where query in ('kMDItemDisplayName == \"rook.stl\"', 'kMDItemDisplayName == \"video.mp4\"')"
        ]
    },
    {
        "name": "mdls",
        "description": "Query file metadata in the Spotlight database.",
        "examples": [
            "select * from mdls where path = '/Users/testuser/Desktop/testfile';"
        ]
    },
    {
        "name": "memory_array_mapped_addresses",
        "description": "Data associated for address mapping of physical memory arrays.",
        "examples": []
    },
    {
        "name": "memory_arrays",
        "description": "Data associated with collection of memory devices that operate to form a memory address.",
        "examples": []
    },
    {
        "name": "memory_device_mapped_addresses",
        "description": "Data associated for address mapping of physical memory devices.",
        "examples": []
    },
    {
        "name": "memory_devices",
        "description": "Physical memory device (type 17) information retrieved from SMBIOS.",
        "examples": []
    },
    {
        "name": "memory_error_info",
        "description": "Data associated with errors of a physical memory array.",
        "examples": []
    },
    {
        "name": "memory_info",
        "description": "Main memory information in bytes.",
        "examples": []
    },
    {
        "name": "memory_map",
        "description": "OS memory region map.",
        "examples": []
    },
    {
        "name": "mounts",
        "description": "System mounted devices and filesystems (not process specific).",
        "examples": []
    },
    {
        "name": "msr",
        "description": "Various pieces of data stored in the model specific register per processor. NOTE: the msr kernel module must be enabled, and osquery must be run as root.",
        "examples": []
    },
    {
        "name": "nfs_shares",
        "description": "NFS shares exported by the host.",
        "examples": []
    },
    {
        "name": "npm_packages",
        "description": "Node packages installed in a system.",
        "examples": [
            "select * from npm_packages",
            "select * from npm_packages where directory = '/home/user/my_project'"
        ]
    },
    {
        "name": "ntdomains",
        "description": "Display basic NT domain information of a Windows machine.",
        "examples": [
            "select * from ntdomains"
        ]
    },
    {
        "name": "ntfs_acl_permissions",
        "description": "Retrieve NTFS ACL permission information for files and directories.",
        "examples": []
    },
    {
        "name": "ntfs_journal_events",
        "description": "Track time/action changes to files specified in configuration data.",
        "examples": []
    },
    {
        "name": "nvram",
        "description": "Apple NVRAM variable listing.",
        "examples": []
    },
    {
        "name": "oem_strings",
        "description": "OEM defined strings retrieved from SMBIOS.",
        "examples": []
    },
    {
        "name": "office_mru",
        "description": "View recently opened Office documents.",
        "examples": [
            "select * from office_mru;"
        ]
    },
    {
        "name": "os_version",
        "description": "A single row containing the operating system name and version.",
        "examples": []
    },
    {
        "name": "osquery_events",
        "description": "Information about the event publishers and subscribers.",
        "examples": []
    },
    {
        "name": "osquery_extensions",
        "description": "List of active osquery extensions.",
        "examples": []
    },
    {
        "name": "osquery_flags",
        "description": "Configurable flags that modify osquery's behavior.",
        "examples": []
    },
    {
        "name": "osquery_info",
        "description": "Top level information about the running version of osquery.",
        "examples": []
    },
    {
        "name": "osquery_packs",
        "description": "Information about the current query packs that are loaded in osquery.",
        "examples": []
    },
    {
        "name": "osquery_registry",
        "description": "List the osquery registry plugins.",
        "examples": []
    },
    {
        "name": "osquery_schedule",
        "description": "Information about the current queries that are scheduled in osquery.",
        "examples": []
    },
    {
        "name": "package_bom",
        "description": "macOS package bill of materials (BOM) file list.",
        "examples": [
            "select * from package_bom where path = '/var/db/receipts/com.apple.pkg.MobileDevice.bom'"
        ]
    },
    {
        "name": "package_install_history",
        "description": "macOS package install history.",
        "examples": []
    },
    {
        "name": "package_receipts",
        "description": "macOS package receipt details.",
        "examples": [
            "select * from package_bom where path = '/var/db/receipts/com.apple.pkg.MobileDevice.bom'"
        ]
    },
    {
        "name": "password_policy",
        "description": "Password Policies for macOS.",
        "examples": [
            "select * from password_policy"
        ]
    },
    {
        "name": "patches",
        "description": "Lists all the patches applied. Note: This does not include patches applied via MSI or downloaded from Windows Update (e.g. Service Packs).",
        "examples": [
            "select * from patches"
        ]
    },
    {
        "name": "pci_devices",
        "description": "PCI devices active on the host system.",
        "examples": []
    },
    {
        "name": "physical_disk_performance",
        "description": "Provides provides raw data from performance counters that monitor hard or fixed disk drives on the system.",
        "examples": []
    },
    {
        "name": "pipes",
        "description": "Named and Anonymous pipes.",
        "examples": [
            "select * from pipes"
        ]
    },
    {
        "name": "platform_info",
        "description": "Information about EFI/UEFI/ROM and platform/boot.",
        "examples": []
    },
    {
        "name": "plist",
        "description": "Read and parse a plist file.",
        "examples": [
            "select * from plist where path = '/Library/Preferences/loginwindow.plist'"
        ]
    },
    {
        "name": "portage_keywords",
        "description": "A summary about portage configurations like keywords, mask and unmask.",
        "examples": []
    },
    {
        "name": "portage_packages",
        "description": "List of currently installed packages.",
        "examples": []
    },
    {
        "name": "portage_use",
        "description": "List of enabled portage USE values for specific package.",
        "examples": []
    },
    {
        "name": "power_sensors",
        "description": "Machine power (currents, voltages, wattages, etc) sensors.",
        "examples": [
            "select * from power_sensors where category = 'voltage'"
        ]
    },
    {
        "name": "powershell_events",
        "description": "Powershell script blocks reconstructed to their full script content, this table requires script block logging to be enabled.",
        "examples": [
            "select * from powershell_events;",
            "select * from powershell_events where script_text like '%Invoke-Mimikatz%';",
            "select * from powershell_events where cosine_similarity < 0.25;"
        ]
    },
    {
        "name": "preferences",
        "description": "macOS defaults and managed preferences.",
        "examples": [
            "select * from preferences where domain = 'loginwindow'",
            "select preferences.* from users join preferences using (username)"
        ]
    },
    {
        "name": "prefetch",
        "description": "Prefetch files show metadata related to file execution.",
        "examples": [
            "select * from prefetch;"
        ]
    },
    {
        "name": "process_envs",
        "description": "A key/value table of environment variables for each process.",
        "examples": [
            "select * from process_envs where pid = 1",
            "select pe.*\n     from process_envs pe, (select * from processes limit 10) p\n     where p.pid = pe.pid;"
        ]
    },
    {
        "name": "process_etw_events",
        "description": "Windows process execution events.",
        "examples": [
            "select * from process_etw_events;",
            "select * from process_etw_events WHERE time >= (( SELECT unix_time FROM time) - 60 );",
            "select * from process_etw_events WHERE datetime > '2022-11-18 16:48:00';",
            "select * from process_etw_events WHERE datetime BETWEEN '2022-11-18 16:40:00' AND '2022-11-18 16:50:00';"
        ]
    },
    {
        "name": "process_events",
        "description": "Track time/action process executions.",
        "examples": []
    },
    {
        "name": "process_file_events",
        "description": "A File Integrity Monitor implementation using the audit service.",
        "examples": []
    },
    {
        "name": "process_memory_map",
        "description": "Process memory mapped files and pseudo device/regions.",
        "examples": [
            "select * from process_memory_map where pid = 1"
        ]
    },
    {
        "name": "process_namespaces",
        "description": "Linux namespaces for processes running on the host system.",
        "examples": [
            "select * from process_namespaces where pid = 1"
        ]
    },
    {
        "name": "process_open_files",
        "description": "File descriptors for each process.",
        "examples": [
            "select * from process_open_files where pid = 1"
        ]
    },
    {
        "name": "process_open_pipes",
        "description": "Pipes and partner processes for each process.",
        "examples": [
            "select * from process_open_pipes"
        ]
    },
    {
        "name": "process_open_sockets",
        "description": "Processes which have open network sockets on the system.",
        "examples": [
            "select * from process_open_sockets where pid = 1"
        ]
    },
    {
        "name": "processes",
        "description": "All running processes on the host system.",
        "examples": [
            "select * from processes where pid = 1"
        ]
    },
    {
        "name": "programs",
        "description": "Represents products as they are installed by Windows Installer. A product generally correlates to one installation package on Windows. Some fields may be blank as Windows installation details are left to the discretion of the product author.",
        "examples": [
            "select * from programs",
            "select name, install_location from programs where install_location not like 'C:\\Program Files%';"
        ]
    },
    {
        "name": "prometheus_metrics",
        "description": "Retrieve metrics from a Prometheus server.",
        "examples": []
    },
    {
        "name": "python_packages",
        "description": "Python packages installed in a system.",
        "examples": [
            "select * from python_packages where directory='/usr/'"
        ]
    },
    {
        "name": "quicklook_cache",
        "description": "Files and thumbnails within macOS's Quicklook Cache.",
        "examples": []
    },
    {
        "name": "registry",
        "description": "All of the Windows registry hives.",
        "examples": [
            "select path, key, name from registry where key = 'HKEY_USERS'; -- get user SIDS. Note: path is key+name",
            "select path from registry where key like 'HKEY_USERS\\.Default\\%'; -- a SQL wildcard match; will not recurse subkeys",
            "select path from registry where key like 'HKEY_USERS\\.Default\\Software\\%%'; -- recursing query (compare with 1 %)",
            "select path from registry where key like 'HKEY_LOCAL_MACHINE\\Software\\Micr%ft\\%' and type = 'subkey' LIMIT 10; -- midfix wildcard match",
            "select name, type, data from registry where path like 'HKEY_USERS\\%\\Control Panel\\International\\User Profile\\Languages'; -- get users' current UI language. Note: osquery cannot reference HKEY_CURRENT_USER",
            "select name, type, data from registry where path like 'HKEY_USERS\\%\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Wallpapers\\%';  -- list all of the desktop wallpapers",
            "select name, type, data from registry where key like 'HKEY_USERS\\%\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Wallpapers'; -- same, but filtering by key instead of path"
        ]
    },
    {
        "name": "routes",
        "description": "The active route table for the host system.",
        "examples": []
    },
    {
        "name": "rpm_package_files",
        "description": "RPM packages that are currently installed on the host system.",
        "examples": []
    },
    {
        "name": "rpm_packages",
        "description": "RPM packages that are currently installed on the host system.",
        "examples": []
    },
    {
        "name": "running_apps",
        "description": "macOS applications currently running on the host system.",
        "examples": []
    },
    {
        "name": "safari_extensions",
        "description": "Safari browser extension details for all users. This table requires Full Disk Access (FDA) permission.",
        "examples": [
            "select * from safari_extensions where uid=501",
            "select count(*) from users JOIN safari_extensions using (uid)"
        ]
    },
    {
        "name": "sandboxes",
        "description": "macOS application sandboxes container details.",
        "examples": []
    },
    {
        "name": "scheduled_tasks",
        "description": "Lists all of the tasks in the Windows task scheduler.",
        "examples": [
            "select * from scheduled_tasks",
            "select * from scheduled_tasks where hidden=1 and enabled=1"
        ]
    },
    {
        "name": "screenlock",
        "description": "macOS screenlock status. Note: only fetches results for osquery's current logged-in user context. The user must also have recently logged in.",
        "examples": []
    },
    {
        "name": "seccomp_events",
        "description": "A virtual table that tracks seccomp events.",
        "examples": []
    },
    {
        "name": "secureboot",
        "description": "Secure Boot UEFI Settings.",
        "examples": []
    },
    {
        "name": "security_profile_info",
        "description": "Information on the security profile of a given system by listing the system Account and Audit Policies. This table mimics the exported securitypolicy output from the secedit tool.",
        "examples": []
    },
    {
        "name": "selinux_events",
        "description": "Track SELinux events.",
        "examples": []
    },
    {
        "name": "selinux_settings",
        "description": "Track active SELinux settings.",
        "examples": [
            "SELECT * FROM selinux_settings WHERE key = 'enforce'"
        ]
    },
    {
        "name": "services",
        "description": "Lists all installed Windows services and their relevant data.",
        "examples": [
            "select * from services"
        ]
    },
    {
        "name": "shadow",
        "description": "Local system users encrypted passwords and related information. Please note, that you usually need superuser rights to access `/etc/shadow`.",
        "examples": [
            "select * from shadow where username = 'root'"
        ]
    },
    {
        "name": "shared_folders",
        "description": "Folders available to others via SMB or AFP.",
        "examples": []
    },
    {
        "name": "shared_memory",
        "description": "OS shared memory regions.",
        "examples": []
    },
    {
        "name": "shared_resources",
        "description": "Displays shared resources on a computer system running Windows. This may be a disk drive, printer, interprocess communication, or other sharable device.",
        "examples": [
            "select * from shared_resources"
        ]
    },
    {
        "name": "sharing_preferences",
        "description": "macOS Sharing preferences.",
        "examples": []
    },
    {
        "name": "shell_history",
        "description": "A line-delimited (command) table of per-user .*_history data.",
        "examples": [
            "select * from users join shell_history using (uid)"
        ]
    },
    {
        "name": "shellbags",
        "description": "Shows directories accessed via Windows Explorer.",
        "examples": [
            "select * from shellbags;"
        ]
    },
    {
        "name": "shimcache",
        "description": "Application Compatibility Cache, contains artifacts of execution.",
        "examples": [
            "select * from shimcache;"
        ]
    },
    {
        "name": "signature",
        "description": "File (executable, bundle, installer, disk) code signing status.",
        "examples": [
            "SELECT * FROM signature WHERE path = '/bin/ls'",
            "SELECT * FROM signature WHERE path = '/Applications/Xcode.app' AND hash_resources=0",
            "SELECT * FROM (SELECT path, MIN(signed) AS all_signed, MIN(CASE WHEN authority = 'Software Signing' AND signed = 1 THEN 1 ELSE 0 END) AS all_signed_by_apple FROM signature WHERE path LIKE '/bin/%' GROUP BY path);"
        ]
    },
    {
        "name": "sip_config",
        "description": "Apple's System Integrity Protection (rootless) status.",
        "examples": [
            "select * from sip_config"
        ]
    },
    {
        "name": "smbios_tables",
        "description": "BIOS (DMI) structure common details and content.",
        "examples": []
    },
    {
        "name": "smc_keys",
        "description": "Apple's system management controller keys.",
        "examples": [
            "select * from smc_keys where key = 'MOJO'"
        ]
    },
    {
        "name": "socket_events",
        "description": "Track network socket opens and closes.",
        "examples": []
    },
    {
        "name": "ssh_configs",
        "description": "A table of parsed ssh_configs.",
        "examples": [
            "select * from users join ssh_configs using (uid)"
        ]
    },
    {
        "name": "startup_items",
        "description": "Applications and binaries set as user/login startup items.",
        "examples": []
    },
    {
        "name": "sudoers",
        "description": "Rules for running commands as other users via sudo.",
        "examples": []
    },
    {
        "name": "suid_bin",
        "description": "suid binaries in common locations.",
        "examples": []
    },
    {
        "name": "syslog_events",
        "description": "",
        "examples": []
    },
    {
        "name": "system_controls",
        "description": "sysctl names, values, and settings information.",
        "examples": []
    },
    {
        "name": "system_extensions",
        "description": "macOS (>= 10.15) system extension table.",
        "examples": [
            "select * from system_extensions"
        ]
    },
    {
        "name": "system_info",
        "description": "System information for identification.",
        "examples": []
    },
    {
        "name": "systemd_units",
        "description": "Track systemd units.",
        "examples": []
    },
    {
        "name": "temperature_sensors",
        "description": "Machine's temperature sensors.",
        "examples": []
    },
    {
        "name": "time",
        "description": "Track current date and time in UTC.",
        "examples": []
    },
    {
        "name": "time_machine_backups",
        "description": "Backups to drives using TimeMachine.",
        "examples": [
            "select alias, backup_date, td.destination_id, root_volume_uuid, encryption from time_machine_backups tb join time_machine_destinations td on (td.destination_id=tb.destination_id);"
        ]
    },
    {
        "name": "time_machine_destinations",
        "description": "Locations backed up to using Time Machine.",
        "examples": [
            "select alias, backup_date, td.destination_id, root_volume_uuid, encryption from time_machine_backups tb join time_machine_destinations td on (td.destination_id=tb.destination_id);"
        ]
    },
    {
        "name": "tpm_info",
        "description": "A table that lists the TPM related information.",
        "examples": [
            "select * from tpm_info"
        ]
    },
    {
        "name": "ulimit_info",
        "description": "System resource usage limits.",
        "examples": [
            "select * from ulimit_info"
        ]
    },
    {
        "name": "unified_log",
        "description": "Queries the OSLog framework for entries in the system log. The maximum number of rows returned is limited for performance issues. Use timestamp > or >= constraints to optimize query performance. This table introduces a new idiom for extracting sequential data in batches using multiple queries, ordered by timestamp. To trigger it, the user should include the condition \"timestamp > -1\", and the table will handle pagination. Note that the saved pagination counter is incremented globally across all queries and table invocations within a query. To avoid multiple table invocations within a query, use only AND and = constraints in WHERE clause.",
        "examples": [
            "select * from unified_log",
            "select * from unified_log where process = 'osqueryd'",
            "select * from unified_log where predicate = 'process = \"osqueryd\" OR process = \"Santa\"'",
            "select * from unified_log where predicate = 'processImagePath = \"/opt/osquery/lib/osquery.app/Contents/MacOS/osqueryd\"'",
            "select * from unified_log where max_rows = 1234",
            "select * from unified_log where timestamp > -1",
            "select * from unified_log where timestamp > -1 and max_rows = 500",
            "select * from unified_log where timestamp > -1 and timestamp > (select unix_time - 86400 from time)"
        ]
    },
    {
        "name": "uptime",
        "description": "Track time passed since last boot. Some systems track this as calendar time, some as runtime.",
        "examples": []
    },
    {
        "name": "usb_devices",
        "description": "USB devices that are actively plugged into the host system.",
        "examples": []
    },
    {
        "name": "user_events",
        "description": "Track user events from the audit framework.",
        "examples": []
    },
    {
        "name": "user_groups",
        "description": "Local system user group relationships.",
        "examples": []
    },
    {
        "name": "user_interaction_events",
        "description": "Track user interaction events from macOS' event tapping framework.",
        "examples": []
    },
    {
        "name": "user_ssh_keys",
        "description": "Returns the private keys in the users ~/.ssh directory and whether or not they are encrypted.",
        "examples": [
            "select * from users join user_ssh_keys using (uid) where encrypted = 0"
        ]
    },
    {
        "name": "userassist",
        "description": "UserAssist Registry Key tracks when a user executes an application from Windows Explorer.",
        "examples": [
            "select * from userassist;"
        ]
    },
    {
        "name": "users",
        "description": "Local user accounts (including domain accounts that have logged on locally (Windows)).",
        "examples": [
            "select * from users where uid = 1000",
            "select * from users where username = 'root'",
            "select count(*) from users u, user_groups ug where u.uid = ug.uid"
        ]
    },
    {
        "name": "video_info",
        "description": "Retrieve video card information of the machine.",
        "examples": []
    },
    {
        "name": "virtual_memory_info",
        "description": "Darwin Virtual Memory statistics.",
        "examples": [
            "select * from virtual_memory_info;"
        ]
    },
    {
        "name": "wifi_networks",
        "description": "macOS known/remembered Wi-Fi networks list.",
        "examples": []
    },
    {
        "name": "wifi_status",
        "description": "macOS current WiFi status.",
        "examples": []
    },
    {
        "name": "wifi_survey",
        "description": "Scan for nearby WiFi networks.",
        "examples": []
    },
    {
        "name": "winbaseobj",
        "description": "Lists named Windows objects in the default object directories, across all terminal services sessions.  Example Windows ojbect types include Mutexes, Events, Jobs and Semaphors.",
        "examples": [
            "select object_name, object_type from winbaseobj",
            "select * from winbaseobj where type='Mutant'"
        ]
    },
    {
        "name": "windows_crashes",
        "description": "Extracted information from Windows crash logs (Minidumps).",
        "examples": [
            "select * from windows_crashes",
            "select * from windows_crashes where module like '%electron.exe%'",
            "select * from windows_crashes where datetime < '2016-10-14'",
            "select * from windows_crashes where registers like '%rax=0000000000000004%'",
            "select * from windows_crashes where stack_trace like '%vlc%'"
        ]
    },
    {
        "name": "windows_eventlog",
        "description": "Table for querying all recorded Windows event logs.",
        "examples": [
            "select * from windows_eventlog where eventid=4625 and channel='Security'"
        ]
    },
    {
        "name": "windows_events",
        "description": "Windows Event logs.",
        "examples": [
            "select * from windows_events where eventid=4104 and source='Security'"
        ]
    },
    {
        "name": "windows_firewall_rules",
        "description": "Provides the list of Windows firewall rules.",
        "examples": [
            "select * from windows_firewall_rules"
        ]
    },
    {
        "name": "windows_optional_features",
        "description": "Lists names and installation states of windows features. Maps to Win32_OptionalFeature WMI class.",
        "examples": [
            "select * from windows_optional_features",
            "select * from windows_optional_features where name = 'SMB1Protocol' AND state = 1"
        ]
    },
    {
        "name": "windows_search",
        "description": "Run searches against the Windows system index database using Advanced Query Syntax. See https://learn.microsoft.com/en-us/windows/win32/search/-search-3x-advancedquerysyntax for details.",
        "examples": [
            "select * from windows_search",
            "select * from windows_search where query = 'folder:documents'",
            "select * from windows_search where query = '\"some text in file\" folder:documents'",
            "select * from windows_search where query = '\"some text in file\" folder:documents' and additional_properties = 'system.mimetype,system.itemurl'",
            "select * from windows_search where sort = 'system.size desc'",
            "select * from windows_search where sort = 'system.size desc' and max_results = 10",
            "select *, json_extract(properties, '$.\"system.itemurl\"') as itemurl from windows_search where max_results = 5 and additional_properties = 'system.itemurl' and sort = 'system.size desc'",
            "select properties -> '$.\"system.itemurl\"' as itemurl from windows_search where max_results = 5 and additional_properties = 'system.itemurl' and sort = 'system.size desc'",
            "select * from windows_search WHERE query = 'folder:documents' AND date_created >= (( SELECT unix_time FROM time) - 60 )",
            "select *, datetime(date_created, 'unixepoch') as datetime from windows_search WHERE query = 'folder:documents' AND datetime > '2022-11-18 16:48:00'",
            "select *, datetime(date_created, 'unixepoch') as datetime from windows_search WHERE query = 'folder:documents' AND datetime BETWEEN '2022-11-18 16:40:00' AND '2023-11-18 16:50:00'"
        ]
    },
    {
        "name": "windows_security_center",
        "description": "The health status of Window Security features. Health values can be \"Good\", \"Poor\". \"Snoozed\", \"Not Monitored\", and \"Error\".",
        "examples": [
            "select * from windows_security_center"
        ]
    },
    {
        "name": "windows_security_products",
        "description": "Enumeration of registered Windows security products. Note: Not compatible with Windows Server.",
        "examples": [
            "select * from windows_security_products"
        ]
    },
    {
        "name": "windows_update_history",
        "description": "Provides the history of the windows update events.",
        "examples": [
            "select * from windows_update_history"
        ]
    },
    {
        "name": "wmi_bios_info",
        "description": "Lists important information from the system bios.",
        "examples": [
            "select * from wmi_bios_info",
            "select * from wmi_bios_info where name = 'AMTControl'"
        ]
    },
    {
        "name": "wmi_cli_event_consumers",
        "description": "WMI CommandLineEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details.",
        "examples": [
            "select filter,consumer,query,command_line_template,wcec.name from wmi_cli_event_consumers wcec left outer join wmi_filter_consumer_binding wcb on consumer = wcec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;"
        ]
    },
    {
        "name": "wmi_event_filters",
        "description": "Lists WMI event filters.",
        "examples": [
            "select * from wmi_event_filters"
        ]
    },
    {
        "name": "wmi_filter_consumer_binding",
        "description": "Lists the relationship between event consumers and filters.",
        "examples": [
            "select * from wmi_filter_consumer_binding"
        ]
    },
    {
        "name": "wmi_script_event_consumers",
        "description": "WMI ActiveScriptEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details.",
        "examples": [
            "select filter,consumer,query,scripting_engine,script_file_name,script_text,wsec.name from wmi_script_event_consumers wsec left outer join wmi_filter_consumer_binding wcb on consumer = wsec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;"
        ]
    },
    {
        "name": "xprotect_entries",
        "description": "Database of the machine's XProtect signatures.",
        "examples": []
    },
    {
        "name": "xprotect_meta",
        "description": "Database of the machine's XProtect browser-related signatures.",
        "examples": []
    },
    {
        "name": "xprotect_reports",
        "description": "Database of XProtect matches (if user generated/sent an XProtect report).",
        "examples": []
    },
    {
        "name": "yara",
        "description": "Triggers one-off YARA query for files at the specified path. Requires one of `sig_group`, `sigfile`, or `sigrule`.",
        "examples": [
            "select * from yara where path = '/etc/passwd'",
            "select * from yara where path LIKE '/etc/%'",
            "select * from yara where path = '/etc/passwd' and sigfile = '/etc/osquery/yara/test.yara'",
            "select * from yara where path = '/etc/passwd' and sigrule = 'rule always_true { condition: true }'"
        ]
    },
    {
        "name": "yara_events",
        "description": "Track YARA matches for files specified in configuration data.",
        "examples": []
    },
    {
        "name": "ycloud_instance_metadata",
        "description": "Yandex.Cloud instance metadata.",
        "examples": [
            "select * from ycloud_instance_metadata",
            "select * from ycloud_instance_metadata where metadata_endpoint=\"http://169.254.169.254\""
        ]
    },
    {
        "name": "yum_sources",
        "description": "Current list of Yum repositories or software channels.",
        "examples": []
    }
]